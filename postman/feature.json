{
	"info": {
		"_postman_id": "30971072-447a-4449-826c-d9e5052915a3",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29332259"
	},
	"item": [
		{
			"name": "Добавление пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"mail@mail.ru\"').to.eql('mail@mail.ru');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"New UserName\"').to.eql('New UserName');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"New UserName\",\r\n  \"email\": \"mail@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/users",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"mail2@mail.ru\"').to.eql('mail2@mail.ru');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"New UserName 2\"').to.eql('New UserName 2');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"New UserName 2\",\r\n  \"email\": \"mail2@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/users",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test category 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"New Category\"').to.eql('New Category');\r",
							"});\r",
							"pm.test(\"Test category 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"New Category\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/categories",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"var start = moment().add(2, 's');\r",
							"pm.environment.set('eventDate', start.format('yyyy-MM-dd HH:mm:ss'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test event 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"});\r",
							"pm.test(\"Test event 'annotation' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('annotation');\r",
							"    pm.expect(jsonData.annotation, '\"annotation\" must be \"New Event annotation!!!\"').to.eql('New Event annotation!!!');\r",
							"});\r",
							"pm.test(\"Test event 'description' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData.description, '\"description\" must be \"New Event description!!!\"').to.eql('New Event description!!!');\r",
							"});\r",
							"pm.test(\"Test event 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"New Event title!!!\"').to.eql('New Event Title');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"New Event annotation!!!\",\r\n  \"category\": 1,\r\n  \"description\": \"New Event description!!!\",\r\n  \"eventDate\": \"2024-02-27 12:00:00\",\r\n  \"location\": {\r\n    \"lat\": -45,\r\n    \"lon\": 125\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": false,\r\n  \"title\": \"New Event Title\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/events",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария 1 к событию 1 пользователем 138",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"Это первый комментарий к событию!\"').to.eql('Это первый комментарий к событию!');\r",
							"});\r",
							"pm.test(\"Test comment 'authorName' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('authorName');\r",
							"    pm.expect(jsonData.authorName, '\"authorName\" must be \"New UserName\"').to.eql('New UserName');\r",
							"});\r",
							"pm.test(\"Test comment 'createdOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('createdOn');\r",
							"});\r",
							"pm.test(\"Test comment 'modifiedOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('modifiedOn');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Это первый комментарий к событию!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария 2 к событию 1 пользователем 138",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"Это второй комментарий к событию!\"').to.eql('Это второй комментарий к событию!');\r",
							"});\r",
							"pm.test(\"Test comment 'authorName' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('authorName');\r",
							"    pm.expect(jsonData.authorName, '\"authorName\" must be \"New UserName\"').to.eql('New UserName');\r",
							"});\r",
							"pm.test(\"Test comment 'createdOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('createdOn');\r",
							"});\r",
							"pm.test(\"Test comment 'modifiedOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('modifiedOn');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Это второй комментарий к событию!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с пустым текстом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"  \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с отсутствующим текстом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"Это новый улучшенный текст комментария #2!\"').to.eql('Это новый улучшенный текст комментария #2!');\r",
							"});\r",
							"pm.test(\"Test comment 'authorName' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('authorName');\r",
							"    pm.expect(jsonData.authorName, '\"authorName\" must be \"New UserName\"').to.eql('New UserName');\r",
							"});\r",
							"pm.test(\"Test comment 'createdOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('createdOn');\r",
							"});\r",
							"pm.test(\"Test comment 'modifiedOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('modifiedOn');\r",
							"});\r",
							"pm.test(\"Test for non-null modifiedOn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.modifiedOn).to.not.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Это новый улучшенный текст комментария #2!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария НЕ автором этого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Это новый улучшенный текст комментария #2!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "139"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария на пустой текст",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"   \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария на комментарий без текста",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария #2 админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"Это измененный админом текст комментария #2!\"').to.eql('Это измененный админом текст комментария #2!');\r",
							"});\r",
							"pm.test(\"Test comment 'authorName' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('authorName');\r",
							"    pm.expect(jsonData.authorName, '\"authorName\" must be \"New UserName\"').to.eql('New UserName');\r",
							"});\r",
							"pm.test(\"Test comment 'createdOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('createdOn');\r",
							"});\r",
							"pm.test(\"Test comment 'modifiedOn' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('modifiedOn');\r",
							"});\r",
							"pm.test(\"Test for non-null modifiedOn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.modifiedOn).to.not.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Это измененный админом текст комментария #2!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение админом комментария на пустой текст",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"   \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария на комментарий без текста Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя, отсортированных от новых к старым",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comment response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].text, '\"text\" must be \"Это измененный админом текст комментария #2!\"').to.eql(\"Это измененный админом текст комментария #2!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[1] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].text, '\"text\" must be \"Это первый комментарий к событию!\"').to.eql(\"Это первый комментарий к событию!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/admin/comments?userId=1&from=0&size=100",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя с отрицательными параметрами",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/comments?userId=1&from=0&size=-100",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "-100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя с отрицательными параметрами запроса",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/comments?userId=1&from=-1&size=100",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "from",
							"value": "-1"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя с дефолтными параметрами запроса",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comment response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].text, '\"text\" must be \"Это измененный админом текст комментария #2!\"').to.eql(\"Это измененный админом текст комментария #2!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].text, '\"id\" must be \"Это первый комментарий к событию!\"').to.eql(\"Это первый комментарий к событию!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/comments?userId=1",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев к событию со статусом НЕ PUBLISHED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/events/:eventId/comments",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение статуса события 1 на \"PUBLISHED\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('state');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl1}}/admin/events/:eventId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события с количеством комментариев к нему",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test event 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Test numberOfComments\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.numberOfComments, 'numberOfComments must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/events/:eventId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев к событию по eventId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test list of comments\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].text, '\"text\" must be \"Это измененный админом текст комментария #2!\"').to.eql(\"Это измененный админом текст комментария #2!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[1] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1].text, '\"text\" must be \"Это первый комментарий к событию!\"').to.eql(\"Это первый комментарий к событию!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/events/:eventId/comments",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя после удаления комментария #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comment response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" must be \"Это первый комментарий к событию!\"').to.eql(\"Это первый комментарий к событию!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/admin/comments?userId=1&from=0&size=100",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl1",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}